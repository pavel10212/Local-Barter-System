datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId         String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String   @unique
  password       String
  firstName      String?
  lastName       String?
  profileImageId String?  @db.ObjectId
  address        String?
  phoneNumber    String?
  items          Item[]
  barters        Barter[] @relation("BarterOwner")
  offers         Offer[]  @relation("OfferCreator")
}

model Item {
  itemId      String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String?
  itemOwner   User     @relation(fields: [userId], references: [userId])
  userId      String   @db.ObjectId
  barters     Barter[] @relation("BarterItem")
  offers      Offer[]  @relation("OfferItem")
}

model Barter {
  barterId    String  @id @default(auto()) @map("_id") @db.ObjectId
  barterOwner User    @relation("BarterOwner", fields: [userId], references: [userId])
  userId      String  @db.ObjectId
  item        Item    @relation("BarterItem", fields: [itemId], references: [itemId], onDelete: Cascade)
  itemId      String  @db.ObjectId
  description String?
  itemSeeking String
  status      String
  offers      Offer[] @relation("BarterOffers")
}

model Offer {
  offerId      String @id @default(auto()) @map("_id") @db.ObjectId
  offerCreator User   @relation("OfferCreator", fields: [userId], references: [userId])
  userId       String @db.ObjectId
  barter       Barter @relation("BarterOffers", fields: [barterId], references: [barterId], onDelete: Cascade)
  barterId     String @db.ObjectId
  item         Item   @relation("OfferItem", fields: [itemId], references: [itemId], onDelete: Cascade)
  itemId       String @db.ObjectId
  status       String
}
